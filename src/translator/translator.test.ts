import { parseJssScript } from "parser/jssParser";
import { ArrayTokenStream } from "parser/tokenStream";
import { evalTestCode } from "testUtils";
import { translator } from "./translator";

const CSS = `@import 'main.css';

const bgColor = '#fff';

.className {
  color: red;
  background: $\{bgColor\};
}`;

describe('translator()', () => {
    it('translates simple css', () => {
        const result = translator(parseJssScript(ArrayTokenStream.fromString(CSS)),
                                 'result.jss',
                                 'result.css');
        const codeWithoutSourceMap = result.value.replace(/\/\/# sourceMappingURL.*/, '').trim();
        expect(codeWithoutSourceMap).toEqual(`// this code is autogenerated, do not edit it
var _styles = _styles ? _styles : new JssStylesheet();
var self = null;

_styles.insertCss("@import 'main.css';");
const bgColor = '#fff';
_styles.insertBlock((function() {
var self = new JssStyleBlock([\`.className\`]);
self.push(\`color\`, \`red\`);
self.push(\`background\`, \`$\{bgColor\}\`);

return self;
}).bind(self)());

export _styles;`);
        expect(result.value).toMatch(/\/\/# sourceMappingURL=data:application\/json;charset=utf\-8;base64,[\w\+]+=*$/);

        expect(evalTestCode(CSS).toCss()).toEqual(`@import 'main.css';

.className {
    color: red;
    background: #fff;
}`);
    });

    it('parses nested classes', () => {
        expect(evalTestCode(`.className1 .className2 {
  font-size: 10px;

  .className3 {
    font-size: 12px;
}
}`).toArray()).toEqual([
    {name: '.className1 .className2', value: { "font-size": "10px" }},
    {name: '.className3', value: { "font-size": "12px" }},
]);
    });

    it('parses vars in selectors', () => {
        expect(evalTestCode(`const className = '.someClassName';
$\{className\} .className2 {
font-size: 10px; }`).toArray()).toEqual([
    {name: '.someClassName .className2', value: { "font-size": "10px" }},
])
    });

    it('can access parents objects by this keyword', () => {
        expect(evalTestCode(`.className1 .className2 {
  font-size: 10px;

  $\{this.name\}.className3 {
    font-size: $\{this.styles.fontSize\};
}
}`).toArray()).toEqual([
    {name: '.className1 .className2', value: { "font-size": "10px" }},
    {name: '.className1 .className2.className3', value: { "font-size": "10px" }},
]);
    });

    it('can call functions', () => {
        expect(evalTestCode(`
function pad2(n) { return n.length > 1 ? n : "0" + n; }
function rgb(r,g,b) { return "#" + pad2(r.toString(16)) + pad2(g.toString(16)) + pad2(b.toString(16)); }
.className {
  color: $\{rgb(255,255,255)\};
}
`).toArray()).toEqual([
    {name: '.className', value: { color:  "#ffffff"}}
])
    });

    it('can extend class by ... (3 dots) operator', () => {
        expect(evalTestCode(`const mixin = new { color: red };
.childClass {
  font-size: 10px;
  ...mixin;
}`).toArray()).toEqual([
    {name: ".childClass", value: {color: "red", "font-size": "10px"}}
]);

        expect(evalTestCode(`const mixin = new { "color": red };
.childClass {
  font-size: 10px;
  ...mixin;
}`).toArray()).toEqual([
    {name: ".childClass", value: {color: "red", "font-size": "10px"}}
]);
    });

    it('can handle ...this.style', () => {
        expect(evalTestCode(`.parent {
    font-size: 10px;
    color: red;
    .child {
        ...this.styles;
    }
}`).toArray()).toEqual([
    {name: ".parent", value: {color: "red", "font-size": "10px"}},
    {name: ".child", value: {color: "red", "font-size": "10px"}}
]);
    });

    it('can handle jss varables', () => {
        expect(evalTestCode(`const hidden = new { display: none; };
.className {
    font-size: 10px;
    ...hidden;
}
`).toArray()).toEqual([
    {name: ".className", value: {display: "none", "font-size": "10px"}},
]);
    });

    it('can handle jss variables with child nodes, and ${this} is refered to the parent class', () => {
        expect(evalTestCode(`const clearfix = new {
    display: block;
    name: $\{this.name\};
    $\{this.name\}:after {
        content: ".";
        display: table;
        clear: both;
    }
};
.className {
    font-size: 10px;
    ...clearfix;
}
.className2 {
    font-size: 11px;
    ...clearfix;
}
`).toArray()).toEqual([
    {name: ".className", value: {"font-size": "10px", "display": "block", "name": ".className"}},
    {name: ".className:after", value: {content: '"."', display: "table", clear: "both"}},
    {name: ".className2", value: {"font-size": "11px", "display": "block", "name": ".className2"}},
    {name: ".className2:after", value: {content: '"."', display: "table", clear: "both"}},
]);
    });


    it('parses some complecated syntax', () => {
        expect(evalTestCode(`const a = 1; const b = 2; const c = a+b; _styles = c;`)).toEqual(3);
        expect(evalTestCode(`const a = 1; const b = 2; const c = b-a; _styles = c;`)).toEqual(1);

        expect(evalTestCode(`html { -webkit-text-size-adjust: 100%; /* 2 */ }`).toArray()).toEqual([
            {name: "html", value: {"-webkit-text-size-adjust": "100%"}},
        ]);

        expect(evalTestCode(`button::-moz-focus-inner,[type="button"]::-moz-focus-inner{padding: 0;}`).toArray()).toEqual([
            {name: `button::-moz-focus-inner, [type="button"]::-moz-focus-inner`, value: {
                padding: "0",
            }}
        ]);

    });

});
