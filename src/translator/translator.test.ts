import { parseJssScript } from "parser/jssParser";
import { ArrayTokenStream } from "parser/tokenStream";
import { evalTestCode, translateToJs } from "testUtils";
import { GeneratedCode, translator } from "./translator";

const CSS = `@import 'main.css';

const bgColor = '#fff';

.className {
  color: red;
  background: $\{bgColor\};
}`;

const EXPEXTED_HEADER = `// this code is autogenerated, do not edit it
Object.defineProperty(exports, "__esModule", {
    value: true
});
var _styles = _styles ? _styles : new JssStylesheet();
exports.styles = _styles;
var self = null;`;

const EXPECTED_FOOTER = `_styles;`;

function codeWithoutSourceMap(code : GeneratedCode) : string {
    return code.value.replace(/\/\/# sourceMappingURL.*/, '').trim();
}

describe('translator()', () => {
    it('translates simple css', () => {
        const result = translator(parseJssScript(ArrayTokenStream.fromString(CSS)),
                                 'result.jss',
                                 'result.css');
        expect(codeWithoutSourceMap(result)).toEqual(`${EXPEXTED_HEADER}

_styles.insertCss(\`@import 'main.css';\`);
const bgColor = '#fff';
_styles.insertBlock((function(parent) {
var self = new JssStyleBlock([\`.className\`], {}, parent);

(function(){
self.push(\`color\`, \`red\`);
self.push(\`background\`, \`$\{bgColor\}\`);

}).bind(self)();
return self;
}).bind(self)(self));

${EXPECTED_FOOTER}`);
        expect(result.value).toMatch(/\/\/# sourceMappingURL=data:application\/json;charset=utf\-8;base64,[\w\+]+=*$/);

        expect(evalTestCode(CSS).toCss()).toEqual(`@import 'main.css';

.className {
    color: red;
    background: #fff;
}`);
    });

    it('parses nested classes', () => {
        expect(evalTestCode(`.className1 .className2 {
  font-size: 10px;

  .className3 {
    font-size: 12px;
}
}`).toArray()).toEqual([
    {name: '.className1 .className2', value: { "font-size": "10px" }},
    {name: '.className3', value: { "font-size": "12px" }},
]);
    });

    it('parses vars in selectors', () => {
        expect(evalTestCode(`const className = '.someClassName';
$\{className\} .className2 {
font-size: 10px; }`).toArray()).toEqual([
    {name: '.someClassName .className2', value: { "font-size": "10px" }},
])
    });

    it('parses vars in propertyName in ${}', () => {
        expect(evalTestCode(`const propName = 'color';
div a:hover {
background-$\{propName\}: #444;
$\{propName\}: #fff;
}`).toArray()).toEqual([
    {name: 'div a:hover', value: { "color": "#fff", "background-color": '#444' }},
])
    });

    it('parses vars in propertyName in []', () => {
        expect(evalTestCode(`const propName = 'color';
div a:hover {
[propName]: #fff;
}`).toArray()).toEqual([
    {name: 'div a:hover', value: { "color": "#fff" }},
])
    });

    it('parses vars in propertyValue', () => {
        expect(evalTestCode(`const value = 'fff';
div a:hover {
\${'color'}: #\${value};
}`).toArray()).toEqual([
    {name: 'div a:hover', value: { "color": "#fff" }},
])
    });


    it('can access parents objects by this keyword', () => {
        expect(evalTestCode(`.className1 .className2 {
  font-size: 10px;

  $\{this.name\}.className3 {
    font-size: $\{this.parent.styles.fontSize\};
}
}`).toArray()).toEqual([
    {name: '.className1 .className2', value: { "font-size": "10px" }},
    {name: '.className1 .className2.className3', value: { "font-size": "10px" }},
]);
    });

    it('can access parents objects by parent keyword', () => {
        expect(evalTestCode(`.className1 .className2 {
  font-size: 10px;

  $\{this.name\}.className3 {
    font-size: $\{parent.styles.fontSize\};
}
}`).toArray()).toEqual([
    {name: '.className1 .className2', value: { "font-size": "10px" }},
    {name: '.className1 .className2.className3', value: { "font-size": "10px" }},
]);
    });

    it('can call functions', () => {
        expect(evalTestCode(`
function pad2(n) { return n.length > 1 ? n : "0" + n; }
function rgb(r,g,b) { return "#" + pad2(r.toString(16)) + pad2(g.toString(16)) + pad2(b.toString(16)); }
.className {
  color: $\{rgb(255,255,255)\};
}
`).toArray()).toEqual([
    {name: '.className', value: { color:  "#ffffff"}}
])
    });

    it('can extend class by ... (3 dots) operator', () => {
        expect(evalTestCode(`const mixin = new { color: red };
.childClass {
  font-size: 10px;
  ...mixin;
}`).toArray()).toEqual([
    {name: ".childClass", value: {color: "red", "font-size": "10px"}}
]);

        expect(evalTestCode(`const mixin = new { "color": red };
.childClass {
  font-size: 10px;
  ...mixin;
}`).toArray()).toEqual([
    {name: ".childClass", value: {color: "red", "font-size": "10px"}}
]);
    });

    it('can handle ...this.style', () => {
        expect(evalTestCode(`.parent {
    font-size: 10px;
    color: red;
    .child {
        ...this.parent.styles;
    }
}`).toArray()).toEqual([
    {name: ".parent", value: {color: "red", "font-size": "10px"}},
    {name: ".child", value: {color: "red", "font-size": "10px"}}
]);
    });

    it('can handle jss varables', () => {
        expect(evalTestCode(`const hidden = new { display: none; };
.className {
    font-size: 10px;
    ...hidden;
}
`).toArray()).toEqual([
    {name: ".className", value: {display: "none", "font-size": "10px"}},
]);
    });

    it('can handle jss variables with child nodes, and ${this} is refered to the parent class', () => {
        expect(evalTestCode(`const clearfix = new {
    display: block;
    name: $\{this.name\};
    $\{this.name\}:after {
        content: ".";
        display: table;
        clear: both;
    }
};
.className {
    font-size: 10px;
    ...clearfix;
}
.className2 {
    font-size: 11px;
    ...clearfix;
}
`).toArray()).toEqual([
    {name: ".className", value: {"font-size": "10px", "display": "block", "name": ".className"}},
    {name: ".className:after", value: {content: '"."', display: "table", clear: "both"}},
    {name: ".className2", value: {"font-size": "11px", "display": "block", "name": ".className2"}},
    {name: ".className2:after", value: {content: '"."', display: "table", clear: "both"}},
]);
    });

    it('parses some complecated syntax', () => {
        expect(evalTestCode(`const a = 1; const b = 2; const c = a+b; _styles = c;`)).toEqual(3);
        expect(evalTestCode(`const a = 1; const b = 2; const c = b-a; _styles = c;`)).toEqual(1);

        expect(evalTestCode(`html { -webkit-text-size-adjust: 100%; /* 2 */ }`).toArray()).toEqual([
            {name: "html", value: {"-webkit-text-size-adjust": "100%"}},
        ]);

        expect(evalTestCode(`button::-moz-focus-inner,[type="button"]::-moz-focus-inner{padding: 0;}`).toArray()).toEqual([
            {name: `button::-moz-focus-inner, [type="button"]::-moz-focus-inner`, value: {
                padding: "0",
            }}
        ]);

    });

    it('parses media queries', () => {
        expect(evalTestCode(`@media only screen and (max-width: 600px) {
  body {
    background-color: lightblue;
  }
}`).toArray()).toEqual([{name: '@media only screen and (max-width: 600px)', children: [
    {name: 'body', value: {"background-color": 'lightblue'}}
]}]);
    });

    it('parses @page', () => {
        expect(evalTestCode(`@page {
  size: 8.5in 9in;
  margin-top: 4in;
}

/* Targets all even-numbered pages */
@page :left {
  margin-top: 4in;
}

/* Targets all odd-numbered pages */
@page :right {
  size: 11in;
  margin-top: 4in;
}

/* Targets all selectors with 'page: wide;' set */
@page wide {
  size: a4 landscape;
}`).toArray()).toEqual([
    {name: '@page', value: {'margin-top': '4in', size: '8.5in 9in'}},
    {name: '@page :left', value: {'margin-top': '4in'}},
    {name: '@page :right', value: {'margin-top': '4in', size: '11in'}},
    {name: '@page wide', value: {'size': 'a4 landscape'}},
]);
    });

    it('parses complex media queries', () => {
        //TODO instead of @media there can be @page, @charset and etc
        expect(evalTestCode(`.className {
    width: 100px;
    const value = '#fff';
    @media screen {
        width: 200px;
            @media print {
                width: \${Dimentions.fromString(this.parent.styles.width).add(100)};
                color: \${value};
        } } }`).toArray()).toEqual([
            {name: '.className', value: {width: '100px'}},
            {name: '@media screen', children: [
                {name: '.className', value: {width: '200px'}},
                {name: '@media print', children: [
                    {name: '.className', value: {
                        width: '300px',
                        color: '#fff',
                    }},
                ]}
            ]}
        ]);
    });

    it('can parse variables inside style blocks', () => {
        expect(evalTestCode(`.className { const value = 10; width: \${10 + value}px; }`).toCss())
            .toEqual(`.className {
    width: 20px;
}`);
    });

    it('can parse functions inside style blocks', () => {
        expect(evalTestCode(`.className { function randomNumber() { return 42; } width: \${randomNumber()}px; }`).toCss())
            .toEqual(`.className {
    width: 42px;
}`);
    });

    it('can parse jss variables inside style blocks', () => {
        expect(evalTestCode(`.className { const value = new { display: block }; ...value; }`).toCss())
            .toEqual(`.className {
    display: block;
}`);
    });

    it('translates @font-face', () => {
        const source = `@font-face {
    font-family: "Bitstream Vera Serif Bold";
    src: url("https://mdn.github.io/css-examples/web-fonts/VeraSeBd.ttf");
}

body {
    font-family: "Bitstream Vera Serif Bold", serif;
}`;
        expect(evalTestCode(source).toCss()).toEqual(source);
    });

    it('cannot declare @font-face within selectors', () => {
        expect(() => evalTestCode(`.className { @font-face { font-family: 'test'; } }`).toCss())
            .toThrowError();
    });

    it('support @namespace', () => {
        expect(evalTestCode(`@namespace url(http://www.w3.org/1999/xhtml);
@namespace svg url(http://www.w3.org/2000/svg);`).toCss())
            .toEqual(`@namespace url(http://www.w3.org/1999/xhtml);
@namespace svg url(http://www.w3.org/2000/svg);`);
    });

    it('supprts @keyframes', () => {
        expect(evalTestCode(`const size = '50px';
@keyframes important1 {
  from {
    margin-top: $\{size\};
  }
  50% {
    margin-top: 150px !important;
  } /* ignored */
  to {
    margin-top: 100px;
  }
}

@keyframes important2 {
  from {
    margin-top: 50px;
    margin-bottom: 100px;
  }
  to {
    margin-top: 150px !important; /* ignored */
    margin-bottom: 50px;
  }
}`).toCss()).toEqual(`@keyframes important1 {
  from {
    margin-top: 50px;
  }
  50% {
    margin-top: 150px !important;
  } /* ignored */
  to {
    margin-top: 100px;
  }
}
@keyframes important2 {
  from {
    margin-top: 50px;
    margin-bottom: 100px;
  }
  to {
    margin-top: 150px !important; /* ignored */
    margin-bottom: 50px;
  }
}`);
    });

    it('parses @supports', () => {
        expect(evalTestCode(`@supports (display: flex) {
    .flex-container {
        display: flex;
    }
}`).toCss()).toEqual(`@supports (display: flex) {
    .flex-container {
        display: flex;
    }
}`);

        expect(evalTestCode(`.flex-container {
    @supports (display: flex) {
        display: flex;
    }
}`).toCss()).toEqual(`.flex-container { }

@supports (display: flex) {
    .flex-container {
        display: flex;
    }
}`);
    });

    it('parses any atRules', () => {
        expect(evalTestCode(`@custom-rule (display: flex) {
    .flex-container {
        display: flex;
    }
}`).toCss()).toEqual(`@custom-rule (display: flex) {
    .flex-container {
        display: flex;
    }
}`);
    });

    it('parses any atRules inside blocks', () => {
        expect(evalTestCode(`.flex-container {
    @custom-rule (display: flex) {
        display: flex;
    }
}`).toCss()).toEqual(`.flex-container { }

@custom-rule (display: flex) {
    .flex-container {
        display: flex;
    }
}`);
    });

    it('supports nested @atRules', () => {
        expect(evalTestCode(`@supports (display: flex) {
  @media screen and (min-width: 900px) {
    article {
      display: flex;
    }
  }
}`).toCss()).toEqual(`@supports (display: flex) {
    @media screen and (min-width: 900px) {
        article {
            display: flex;
        }
    }
}`);
    });

    it('parses simple selectors', () => {
        expect(evalTestCode('div { display: block; }').toArray()).toEqual([
            {name: 'div', value: { display: 'block' }}
        ]);
    });

    it('parses css variables', () => {
        expect(evalTestCode(`:root {
  --main-bg-color: brown;
}

element {
  background-color: var(--main-bg-color);
}`).toArray()).toEqual([{name: ':root', value: { '--main-bg-color': 'brown' }},
                        {name: 'element', value: {'background-color': 'var(--main-bg-color)'}}])
    });

});

describe('confict solving', () => {
    it('should solve confict between jssDeclaration and rulesetStatement', () => {
        expect(evalTestCode(`p { $\{this.name\}:after; $\{this.name\}:after { display: block; } }`).toCss())
            .toEqual(`p {
    p: after;
}

p:after {
    display: block;
}`);
    });
});

describe('ES6 is translated into commonjs', () => {
    it('translates imports to require', () => {
        expect(translateToJs(`import _ from 'lodash';
import './lib.js';
import * as lib from 'lib';
import {name1, name2} from "module";
import {test, y as y1, 'z' as a} from "lib";
import z, {yy as yy1, 'zz' as zz1} from 'lib';`).value)
            .toEqual(`${EXPEXTED_HEADER}

const _ = require('lodash');
(function() {
    var _r = require('./lib.js');
    if (_r && isJssStyleSheet(_r.styles)) {
        _styles.insertStyleSheet(_r.styles);
    } else if (typeof _r == 'string') {
        _styles.insertCss(_r);
    }
})();
const lib = require('lib');
const {name1, name2} = require("module");
const {test, y:y1, 'z':a} = require("lib");
const z = require('lib');
const {yy:yy1, 'zz':zz1} = require('lib');

${EXPECTED_FOOTER}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlc3VsdC5qc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7TUFBTyxDLFdBQU8sUTs7cUJBQ1AsVTs7Ozs7OztNQUNLLEcsV0FBUyxLO09BQ2IsSyxFQUFPLEssWUFBWSxRO09BQ25CLEksRUFBTSxDLENBQUssRSxFQUFJLEcsQ0FBTyxDLFlBQVEsSztNQUMvQixDLFdBQWlDLEs7T0FBN0IsRSxDQUFNLEcsRUFBSyxJLENBQVEsRyxZQUFVLEsiLCJmaWxlIjoicmVzdWx0LmpzcyJ9`);
    });

    describe('esm exports', () => {
        it('translates exportFromClause', () => {
            expect(codeWithoutSourceMap(translateToJs(`export * from './lib';
export * as x from './lib';
export { y, y1 as y2 } from './lib';`)))
                .toEqual(`${EXPEXTED_HEADER}

_export_star(exports, require('./lib'));
_export_named_export(exports, {'x':'x'}, require('./lib'));
_export_named_export(exports, {'y':'y', 'y1':'y2'}, require('./lib'));

${EXPECTED_FOOTER}`);
        });

        it('translates named exports', () => {
            expect(codeWithoutSourceMap(translateToJs(`export { y, y1 as y2 };`)))
                .toEqual(`${EXPEXTED_HEADER}

_export(exports, {'y':function() { return y; }, 'y2':function() { return y1; }});

${EXPECTED_FOOTER}`);
        });

        it('translates variable exports', () => {
            expect(codeWithoutSourceMap(translateToJs(`export var x;
export var x1 = 1;
export var y1 = 1, y2 = y2;`)))
                .toEqual(`${EXPEXTED_HEADER}

var x;
_export(exports, {'x':function() { return x; }});

var x1 = 1;
_export(exports, {'x1':function() { return x1; }});

var y1 = 1, y2 = 2;
_export(exports, {y1:function() {return y1;}, y2:function() { return y2; }});

${EXPECTED_FOOTER}`);
        });

        it('translates declaration', () => {
            expect(translateToJs(`export function f1() {}
export class C1 {}
export const x1 = 1;
export let {y1, y2} = func();
export const {a1, aa3:a3, ...a2} = func();
export let [z1, z2] = func();`).value)
                .toEqual(`function f1() {}
_export(exports, {'f1': function() { return f1; }});
class C1 {}
_export(exports, {'C1': function() { return C1; }});
const x1 = 1;
_export(exports, {'x1': function() { return x1; }});
let {y1, y2} = func();
_export(exports, {y1 : function() {return y1;}, y2: function() {return y2;}});
const {a1, aa3:a3, ...a2} = func();
_export(exports, {a1 : function() {return a1;}, a2: function() {return a2;}});
export let [z1, z2] = func();
_export(exports, {z1 : function() {return z1;}, z2: function() {return z2;}});
`);
        });

        it('translates default hoistableDeclaration', () => {
            expect(translateToJs(`export default function() {}`).value)
                .toEqual(`var _default = function() {};
_export(exports, {'default': function() { return _default; }});`);
        });

        it('translates default classDeclaration', () => {
            expect(translateToJs(`export default class TestClass {}`).value)
                .toEqual(`class TestClass {}
_export(exports, {'default': function() { return TestClass; }});`);
        });

        it('translates default classDeclaration without name', () => {
            expect(translateToJs(`export default class {}`).value)
                .toEqual(`var _default = class {};
_export(exports, { 'default': function() { return _default; } })`);
        });


        it('translates default assigmentExpression', () => {
            expect(translateToJs(`export default 1 + 2;`).value)
                .toEqual(`const _default = 1 + 2;
_export(exports, { 'default': function() { return _default; } });`);
        });

    });

});
